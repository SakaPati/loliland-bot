import logging
import asyncio
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, ConversationHandler, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = "7311382986:AAESbiY4oydyxpsn_xTX7eYkE2blhFbj36w"
ALLOWED_USER_IDS = [1892554531]

# –°–ª–æ–≤–∞—Ä—å —Å–µ—Ä–≤–µ—Ä–æ–≤
SERVERS = {
    'TechnoMagicRPG': 'TechnoMagic RPG',
    'HiTech': 'HiTech',
    'UltraTech': 'UltraTech',
    'MagicRPG': 'Magic RPG',
    'DarkMagic': 'DarkMagic',
    'MysteryMagic': 'MysteryMagic',
    'TechnoWizardry': 'TechnoWizardry',
    'TechnoMagicSKY': 'TechnoMagic SKY',
    'SpaceX': 'SpaceX',
    'FantasyTechRPG': 'FantasyTech RPG',
    'PixelMon': 'PixelMon'
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECT_MODE, ENTER_NICKNAME = range(2)

# –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã)
task_queue = asyncio.Queue()

async def check_user_access(update: Update) -> bool:
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USER_IDS:
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç {user_id}")
        return False
    return True

async def process_queue():
    while True:
        if task_queue.empty():
            await asyncio.sleep(1)
            continue
        
        user_id, server, nickname, context = await task_queue.get()
        task_id = f"User_{user_id}_Server_{server}"
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è {task_id}: –æ—Ç–ø—Ä–∞–≤–∫–∞ /tpa {nickname} –Ω–∞ —Å–µ—Ä–≤–µ—Ä {server}")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        await context.bot.send_message(chat_id=user_id, text=f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ /tpa {nickname} –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä {server}.")
        
        task_queue.task_done()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_user_access(update):
        return
    await update.message.reply_text(
        "ü§ñ –ë–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è LoliLand\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/login - –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É\n"
    )

async def login_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_user_access(update):
        return ConversationHandler.END
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
    keyboard = [
        [
            InlineKeyboardButton("TechnoMagic RPG", callback_data="/TechnoMagicRPG"),
            InlineKeyboardButton("HiTech", callback_data="/HiTech"),
            InlineKeyboardButton("UltraTech", callback_data="/UltraTech"),
        ],
        [
            InlineKeyboardButton("Magic RPG", callback_data="/MagicRPG"),
            InlineKeyboardButton("DarkMagic", callback_data="/DarkMagic"),
            InlineKeyboardButton("MysteryMagic", callback_data="/MysteryMagic"),
        ],
        [
            InlineKeyboardButton("TechnoWizardry", callback_data="/TechnoWizardry"),
            InlineKeyboardButton("TechnoMagic SKY", callback_data="/TechnoMagicSKY"),
            InlineKeyboardButton("SpaceX", callback_data="/SpaceX"),
        ],
        [
            InlineKeyboardButton("FantasyTech RPG", callback_data="/FantasyTechRPG"),
            InlineKeyboardButton("PixelMon", callback_data="/PixelMon"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=reply_markup)
    return SELECT_MODE

async def select_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_user_access(update):
        return ConversationHandler.END
    
    query = update.callback_query
    await query.answer()
    command = query.data
    server = command[1:]  # –£–¥–∞–ª—è–µ–º —Å–ª—ç—à –∏–∑ callback_data
    context.user_data['server'] = server  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
    await query.edit_message_text(text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {SERVERS[server]}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏–≥—Ä–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, PaXoLoM_):")
    
    return ENTER_NICKNAME

async def enter_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_user_access(update):
        return ConversationHandler.END
    
    nickname = update.message.text.strip()
    server = context.user_data.get('server')
    
    await update.message.reply_text(f"üîÑ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {SERVERS[server]} –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ /tpa {nickname}...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
    task_queue.put_nowait((update.effective_user.id, server, nickname, context))
    
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω.")
    return ConversationHandler.END

async def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("login", login_command)],
        states={
            SELECT_MODE: [CallbackQueryHandler(select_mode)],
            ENTER_NICKNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_nickname)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
    asyncio.create_task(process_queue())
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Webhook
    PORT = int(os.environ.get("PORT", 8443))
    WEBHOOK_URL = os.environ.get("WEBHOOK_URL", "https://loliland-bot.onrender.com")
    if not WEBHOOK_URL:
        raise ValueError("WEBHOOK_URL environment variable not set")
    
    webhook_url = f"{WEBHOOK_URL}/{TELEGRAM_TOKEN}"
    await application.bot.set_webhook(url=webhook_url)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    
    await application.initialize()
    await application.start()
    await application.updater.start_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TELEGRAM_TOKEN,
        webhook_url=webhook_url
    )
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞")
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")